// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2927.SitBot;

//import edu.wpi.first.wpilibj.ADXRS450_Gyro;
//import edu.wpi.first.wpilibj.Compressor;
//import edu.wpi.first.wpilibj.DoubleSolenoid;
//import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	public static SpeedController driveTrainLeftFront;
	public static SpeedController driveTrainLeftBack;
	public static SpeedControllerGroup m_left;
	public static SpeedController driveTrainRightFront;
	public static SpeedController driveTrainRightBack;
	public static SpeedControllerGroup m_right;
    public static SpeedController launcherLeft;
    public static SpeedController launcherRight;
    public static SpeedController attachmentMotor3;
    public static SpeedController attachmentMotor4;
    public static SpeedController attachmentMotor5;
    public static SpeedController attachmentMotor6;
    public static DifferentialDrive driveTrainRobotDrive;

    public static void init() {
    	
    	driveTrainLeftFront = new Talon(2);
    	driveTrainLeftBack = new Talon(3);
    	m_left = new SpeedControllerGroup(driveTrainLeftFront, driveTrainLeftBack);
    	driveTrainRightFront = new Talon(1);
    	driveTrainRightBack = new Talon(0);
    	m_right= new SpeedControllerGroup(driveTrainRightFront, driveTrainRightBack);
        launcherLeft = new Talon(4);
        launcherRight = new Talon(5);
        
        //driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        
    }
    
	public static final boolean saftey = true;
}
